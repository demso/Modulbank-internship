// <auto-generated />
using System;
using BankAccounts.Api.Features.Accounts;
using BankAccounts.Api.Features.Transactions;
using BankAccounts.Api.Infrastructure.CurrencyService;
using BankAccounts.Api.Infrastructure.Database.Context;
using BankAccounts.Api.Infrastructure.RabbitMQ.Events.Shared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankAccounts.Api.Migrations
{
    [DbContext(typeof(BankAccountsDbContext))]
    [Migration("20250817195851_AddEventTables")]
    partial class AddEventTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "account_type", new[] { "checking", "credit", "deposit" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "currencies", new[] { "eur", "rub", "usd" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "event_type", new[] { "account_opened", "client_blocked", "client_unblocked", "interest_accrued", "money_credited", "money_debited", "transfer_completed" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "transaction_type", new[] { "credit", "debit" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankAccounts.Api.Features.Accounts.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<AccountType>("AccountType")
                        .HasColumnType("account_type");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Currencies>("Currency")
                        .HasColumnType("currencies");

                    b.Property<decimal>("InterestRate")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("AccountId");

                    b.HasIndex("OwnerId");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OwnerId"), "hash");

                    b.ToTable("Accounts", (string)null);
                });

            modelBuilder.Entity("BankAccounts.Api.Features.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("CounterpartyAccountId")
                        .HasColumnType("integer");

                    b.Property<Currencies>("Currency")
                        .HasColumnType("currencies");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<TransactionType>("TransactionType")
                        .HasColumnType("transaction_type");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("TransactionId");

                    b.HasIndex("DateTime")
                        .HasDatabaseName("ix_transactions_date_gist");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("DateTime"), "gist");

                    b.HasIndex("AccountId", "DateTime")
                        .HasDatabaseName("ix_transactions_account_id_date");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("BankAccounts.Api.Infrastructure.RabbitMQ.Events.Consumed.Entity.InboxConsumedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<EventType>("EventType")
                        .HasColumnType("event_type");

                    b.Property<string>("Handler")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("inbox_consumed", (string)null);
                });

            modelBuilder.Entity("BankAccounts.Api.Infrastructure.RabbitMQ.Events.Published.Entity.OutboxPublishedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CausationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<EventType>("EventType")
                        .HasColumnType("event_type");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<long>("TryCount")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("outbox_published", (string)null);
                });

            modelBuilder.Entity("BankAccounts.Api.Infrastructure.RabbitMQ.Events.Shared.DeadLetter.DeadLetterEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<EventType?>("EventType")
                        .HasColumnType("event_type");

                    b.Property<string>("Handler")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("inbox_dead_letters", (string)null);
                });

            modelBuilder.Entity("BankAccounts.Api.Features.Transactions.Transaction", b =>
                {
                    b.HasOne("BankAccounts.Api.Features.Accounts.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BankAccounts.Api.Features.Accounts.Account", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
